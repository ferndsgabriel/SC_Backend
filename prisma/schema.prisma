generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Adm {
  id                    String          @id @default(uuid())
  email                 String          @unique
  pass                  String
  name                  String
  lastname              String
  phone_number          String          @unique
  sessionToken          String         
  codRecovery           String? 
  codDate               DateTime?       @default(now())
  countCod              Int             @default(0)
  dateChangePass        DateTime        @default(now()) 
  createDate            DateTime?       @default(now())
}

model Tower{
  id                    String         @id @default(uuid())
  numberTower           String         
  apartment             Apartment[]
  createDate             DateTime?        @default(now())
}

model Apartment {
  id                String         @id @default(uuid())
  numberApt         String
  payment           Boolean        @default(true)
  payday            DateTime?      @default(now())
  tower             Tower          @relation(fields: [tower_id], references: [id])
  tower_id          String
  Reservations      Reservation[] 
  user              User[]
  isCanceled        IsCanceled[] 
  createDate        DateTime?      @default(now())
  messages          Conversation[] 
}

model User {
  cpf                   String          @unique
  id                    String          @id @default(uuid())
  name                  String
  lastname              String
  email                 String          @unique
  pass                  String
  sessionToken          String    
  photo                 String?         @unique      
  accountStatus         Boolean?    
  phone_number          String          @unique
  apartment             Apartment       @relation(fields: [apartment_id], references: [id])
  apartment_id          String
  waitingList           WaitingList[]
  codRecovery           String? 
  codDate               DateTime?       @default(now())
  countCod              Int             @default(0)
  dateChangePass        DateTime        @default(now()) 
  createDate            DateTime?        @default(now())
}

model Reservation {
  id                    String          @id @default(uuid())
  guest                 String?
  reservationStatus     Boolean?
  cleaningService       Boolean     
  date                  Int
  start                 Int
  finish                Int
  isEvaluated           Boolean         @default(false)       
  name                  String
  email                 String
  phone_number          String
  apartment             Apartment       @relation(fields: [apartment_id], references: [id])
  apartment_id          String     
  avaliations           Avaliations[]
  createDate            DateTime?        @default(now())
  acceptedDate          DateTime?
}


model IsCanceled {
  id                     String          @id @default(uuid())
  apartment              Apartment       @relation(fields: [apartment_id], references: [id])
  apartment_id           String
  isTaxed                Boolean         
  name                   String
  email                  String
  phone_number           String
  dateGuest              Int
  dateCancellation       Int     
  createDate             DateTime?        @default(now())
}

model WaitingList {
  id                     String           @id @default(uuid())
  user                   User             @relation(fields: [user_id], references: [id])      
  user_id                String
  date                   Int
  createDate             DateTime?        @default(now())
}

model Avaliations{
  id                     String           @id @default(uuid())
  ease                   Int
  time                   Int
  space                  Int
  hygiene                Int
  reservation            Reservation      @relation(fields: [reservation_id], references: [id])
  reservation_id         String
  createDate             DateTime?        @default(now())
}

model Conversation {
  id                String       @id @default(uuid())
  apartment_id      String
  apartment         Apartment   @relation(fields: [apartment_id], references: [id])
  messages          Message[]
  updateDate        DateTime? 
  createDate        DateTime    @default(now())
}

model Message {
  id                String       @id @default(uuid())
  conversation_id   String
  conversation      Conversation @relation(fields: [conversation_id], references: [id])
  from              String       
  to                String       
  content           String
  delivered         Boolean      @default(false)
  date              DateTime     @default(now())
}